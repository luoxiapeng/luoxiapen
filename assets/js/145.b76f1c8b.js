(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{431:function(t,v,_){"use strict";_.r(v);var e=_(1),a=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"机器码、字节码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#机器码、字节码"}},[t._v("#")]),t._v(" 机器码、字节码")]),t._v(" "),v("p",[t._v("V8 为什么要引入字节码\n早期的 V8 为了提升代码的执行速度，直接将 JavaScript 源代码编译成了没有优化的二进制机器代码，如果某一段二进制代码执行频率过高，那么 V8 会将其标记为热点代码，热点代码会被优化编译器优化，优化后的机器代码执行效率更高。")]),t._v(" "),v("p",[t._v("随着移动设备的普及，V8 团队逐渐发现将 JavaScript 源码直接编译成二进制代码存在两个致命的问题：")]),t._v(" "),v("ul",[v("li",[t._v("时间问题：编译时间过久，影响代码启动速度；")]),t._v(" "),v("li",[t._v("空间问题：缓存编译后的二进制代码占用更多的内存。")])]),t._v(" "),v("p",[t._v("这两个问题无疑会阻碍 V8 在移动设备上的普及，于是 V8 团队大规模重构代码，引入了中间的字节码。字节码的优势有如下三点：")]),t._v(" "),v("ul",[v("li",[t._v("解决启动问题：生成字节码的时间很短；")]),t._v(" "),v("li",[t._v("解决空间问题：字节码虽然占用的空间比原始的 JavaScript 多，但是相较于机器代码，字节码还是小了太多，缓存字节码会大大降低内存的使用。")]),t._v(" "),v("li",[t._v("代码架构清晰：采用字节码，可以简化程序的复杂度，使得 V8 移植到不同的 CPU 架构平台更加容易。")]),t._v(" "),v("li",[t._v("Bytecode 某种程度上就是汇编语言，只是它没有对应特定的 CPU，或者说它对应的是虚拟的 CPU。这样的话，生成 Bytecode 时简单很多，无需为不同的 CPU 生产不同的代码。要知道，V8 支持 9 种不同的 CPU，引入一个中间层 Bytecode，可以简化 V8 的编译流程，提高可扩展性。")])]),t._v(" "),v("p",[t._v("如果我们在不同硬件上去生成 Bytecode，会发现生成代码的指令是一样的。")])])}),[],!1,null,null,null);v.default=a.exports}}]);