(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{512:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),a("p",[t._v("JavaScript 中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、matchAll、replace、search 和 split 方法。本章介绍 JavaScript 正则表达式。")]),t._v(" "),a("p",[t._v("使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/ab+c/")]),t._v("\n")])])]),a("p",[t._v("正则表达式字面量为正则表达式提供了脚本加载后的编译。当正则表达式保持不变时，使用此方法可获得更好的性能。")]),t._v(" "),a("blockquote",[a("p",[t._v("调用 RegExp 对象的构造函数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ab+c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("正则表达式模式是由简单的字符所构成的./abc/；或者是简单和特殊字符的组合，比如 "),a("code",[t._v("/ab*c/")]),t._v(" 或 "),a("code",[t._v("/Chapter")]),t._v(" "),a("code",[t._v("(\\d+)\\.\\d*/")]),t._v("。最后的例子中用到了括号，它在正则表达式中常用作记忆设备。")]),t._v(" "),a("p",[t._v('简单模式是由你想直接找到的字符构成。比如，/abc/ 这个模式就能且仅能匹配 "abc" 字符按照顺序同时出现的情况。例如在 "Hi, do you know your abc\'s?" 和 "The latest airplane designs evolved from slabcraft." 中会匹配成功。在上述两个例子中，匹配的子字符串是 "abc"。但是在 "Grab crab" 中会匹配失败，因为它虽然包含子字符串 "ab c"，但并不是准确的 "abc"。')]),t._v(" "),a("h2",{attrs:{id:"使用特殊字符-ab-c-匹配一个范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用特殊字符-ab-c-匹配一个范围"}},[t._v("#")]),t._v(" 使用特殊字符(/ab*c/匹配一个范围)")]),t._v(" "),a("p",[t._v('比如寻找一个或多个 "b"，或者寻找空格，这时可以在模式中使用特殊字符。比如，你可以使用 /ab*c/ 去匹配一个单独的 "a" 后面跟了零个或者多个 "b"，同时后面跟着 "c" 的字符串：*的意思是前一项出现零次或者多次。在字符串 "cbbabbbbcdebc" 中，这个模式匹配了子字符串 "abbbbc"。')]),t._v(" "),a("ul",[a("li",[a("p",[t._v("断言（Assertions）表示一个匹配在某些条件下发生。断言包含先行断言、后行断言和条件表达式。")])]),t._v(" "),a("li",[a("p",[t._v("边界（Boundaries）\n表示行和单词的开始和结尾。")])]),t._v(" "),a("li",[a("p",[t._v("字符类别（Character Classes）\n区分不同类型的字符，例如区分字母和数字。")])]),t._v(" "),a("li",[a("p",[t._v("组和范围（Groups and Ranges）\n表示表达式字符的分组和范围。")])]),t._v(" "),a("li",[a("p",[t._v("量词（Quantifiers）\n表示匹配的字符或表达式的数量。")])]),t._v(" "),a("li",[a("p",[t._v("Unicode 属性转义（Unicode Property Escapes）基于 unicode 字符属性区分字符。例如大写和小写字母、数学符号和标点")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A quick fox'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexpLastWord "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\w+$/")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexpLastWord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// expected output: Array ["fox"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexpWords "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\b\\w+\\b/g")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexpWords"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// expected output: Array ["A", "quick", "fox"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexpFoxQuality "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\w+(?= fox)/")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexpFoxQuality"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// expected output: Array ["quick"]')]),t._v("\n")])])]),a("p",[a("code",[t._v("\\")])]),t._v(" "),a("p",[t._v("依照下列规则匹配：")]),t._v(" "),a("p",[t._v('在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。例如，前面没有 "" 的 "b" 通常匹配小写字母 "b"，即字符会被作为字面理解，无论它出现在哪里。但如果前面加了 ""，它将不再匹配任何字符，而是表示一个字符边界。')]),t._v(" "),a("p",[t._v('在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。详情请参阅下文中的 "转义（Escaping）" 部分。')]),t._v(" "),a("p",[t._v('如果你想将字符串传递给 RegExp 构造函数，不要忘记在字符串字面量中反斜杠是转义字符。所以为了在模式中添加一个反斜杠，你需要在字符串字面量中转义它。/[a-z]\\s/i 和 new RegExp("[a-z]\\s", "i") 创建了相同的正则表达式：一个用于搜索后面紧跟着空白字符（\\s 可看后文）并且在 a-z 范围内的任意字符的表达式。为了通过字符串字面量给 RegExp 构造函数创建包含反斜杠的表达式，你需要在字符串级别和表达式级别都对它进行转义。例如 /[a-z]:\\/i 和 new RegExp("[a-z]:\\\\","i") 会创建相同的表达式，即匹配类似 "C:" 字符串。')]),t._v(" "),a("p",[a("code",[t._v("^")])]),t._v(" "),a("p",[t._v("匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。")]),t._v(" "),a("p",[t._v("例如，/^A/ 并不会匹配 \"an A\" 中的 'A'，但是会匹配 \"An E\" 中的 'A'。")]),t._v(" "),a("p",[t._v("当 '^' 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。反向字符集合 一节有详细介绍和示例。")]),t._v(" "),a("p",[a("code",[t._v("$")])]),t._v(" "),a("p",[t._v("匹配输入的结束。如果多行标示被设置为 true，那么也匹配换行符前的位置。")]),t._v(" "),a("p",[t._v("例如，/t$/ 并不会匹配 \"eater\" 中的 't'，但是会匹配 \"eat\" 中的 't'。")]),t._v(" "),a("p",[a("code",[t._v("*")])]),t._v(" "),a("p",[t._v("匹配前一个表达式 0 次或多次。等价于 {0,}。")]),t._v(" "),a("p",[t._v('例如，/bo*/ 会匹配 "A ghost boooooed" 中的 \'booooo\' 和 "A bird warbled" 中的 \'b\'，但是在 "A goat grunted" 中不会匹配任何内容。')]),t._v(" "),a("p",[a("code",[t._v("+")])]),t._v(" "),a("p",[t._v('例如，/a+/ 会匹配 "candy" 中的 \'a\' 和 "caaaaaaandy" 中所有的 \'a\'，但是在 "cndy" 中不会匹配任何内容。')]),t._v(" "),a("p",[a("code",[t._v("?")])]),t._v(" "),a("p",[t._v("例如，/e?le?/ 匹配 \"angel\" 中的 'el'、\"angle\" 中的 'le' 以及 \"oslo' 中的 'l'。")]),t._v(" "),a("p",[a("code",[t._v(".")])]),t._v(" "),a("p",[t._v("/.n/ 将会匹配 \"nay, an apple is on the tree\" 中的 'an' 和 'on'，但是不会匹配 'nay'。")]),t._v(" "),a("p",[a("code",[t._v("\\d")])]),t._v(" "),a("p",[t._v("匹配一个数字。等价于[0-9]。")]),t._v(" "),a("p",[t._v("例如， /\\d/ 或者 /[0-9]/ 匹配\"B2 is the suite number.\"中的'2'。")]),t._v(" "),a("p",[a("code",[t._v("\\D")])]),t._v(" "),a("p",[t._v("匹配一个非数字字符。等价于[^0-9]。")]),t._v(" "),a("p",[t._v("例如， /\\D/ 或者 /[^0-9]/ 匹配\"B2 is the suite number.\"中的'B' 。")]),t._v(" "),a("p",[a("code",[t._v("\\w")])]),t._v(" "),a("p",[t._v("例如, /\\w/ 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3'。")]),t._v(" "),a("h2",{attrs:{id:"使用正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用正则表达式"}},[t._v("#")]),t._v(" 使用正则表达式")]),t._v(" "),a("p",[t._v("正则表达式可以被用于 RegExp 的 exec 和 test 方法以及 String 的 match、replace、search 和 split 方法。这些方法在 JavaScript 手册中有详细的解释。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("exec")]),t._v(" 一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。")]),t._v(" "),a("li",[a("code",[t._v("test")]),t._v(" 一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。")]),t._v(" "),a("li",[a("code",[t._v("match")]),t._v(" 一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。")]),t._v(" "),a("li",[a("code",[t._v("matchAll")]),t._v(" 一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。")]),t._v(" "),a("li",[a("code",[t._v("search")]),t._v(" 一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回-1。")]),t._v(" "),a("li",[a("code",[t._v("replace")]),t._v(" 一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。")]),t._v(" "),a("li",[a("code",[t._v("split")]),t._v(" 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myRe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d(b+)d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'g'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myRe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cdbbdbsbz'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"正则表达式执行后的返回信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式执行后的返回信息"}},[t._v("#")]),t._v(" 正则表达式执行后的返回信息")]),t._v(" "),a("h2",{attrs:{id:"myarray"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#myarray"}},[t._v("#")]),t._v(" myArray")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("index")]),t._v(" 在输入的字符串中匹配到的以 0 开始的索引值。")]),t._v(" "),a("li",[a("code",[t._v("input")]),t._v(" 初始字符串。")]),t._v(" "),a("li",[a("code",[t._v("[0]")]),t._v(' 匹配到的所有字符串（并不是匹配后记住的字符串）。注：原文"The last matched characters."，应该是原版错误。匹配到的最终字符。')])]),t._v(" "),a("h2",{attrs:{id:"myre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#myre"}},[t._v("#")]),t._v(" myRe")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("lastIndex")]),t._v(" 下一个匹配的索引值。（这个属性只有在使用 g 参数时可用在 通过参数进行高级搜索 一节有详细的描述.)")]),t._v(" "),a("li",[a("code",[t._v("source")]),t._v("模式文本。在正则表达式创建时更新，不执行。")])]),t._v(" "),a("p",[t._v("正则表达式创建一个没有分配给变量的对象初始化容器。如果你这样做，那么，每一次使用时都好比在使用一个新的正则表达式。因为这个原因，如果你使用这个未分配给一个变量的正则表达式，你将在随后不能访问这个正则表达式的属性。例如，假如你有如下脚本：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myRe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/d(b+)d/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myRe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cdbbdbsbz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The value of lastIndex is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" myRe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n这个脚本输出如下：\n\nThe value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" lastIndex is "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("p",[t._v("然而，如果你有如下脚本：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/d(b+)d/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cdbbdbsbz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The value of lastIndex is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/d(b+)d/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nThe value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" lastIndex is "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("p",[t._v("当发生/d(b+)d/g 使用两个不同状态的正则表达式对象，lastIndex 属性会得到不同的值。如果你需要访问一个正则表达式的属性，则需要创建一个对象初始化生成器，你应该首先把它赋值给一个变量。")]),t._v(" "),a("p",[t._v("在匹配到的替换文本中，脚本使用替代的$ 1,$ 2 表示第一个和第二个括号的子字符串匹配。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\w+)\\s(\\w+)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John Smith"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$2, $1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n这个表达式输出 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Smith, John"')]),t._v("。\n")])])]),a("h2",{attrs:{id:"通过标志进行高级搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过标志进行高级搜索"}},[t._v("#")]),t._v(" 通过标志进行高级搜索")]),t._v(" "),a("ul",[a("li",[t._v("g 全局搜索。")]),t._v(" "),a("li",[t._v("i 不区分大小写搜索。")]),t._v(" "),a("li",[t._v("m 多行搜索。")]),t._v(" "),a("li",[t._v("s 允许 . 匹配换行符。")]),t._v(" "),a("li",[t._v("u 使用 unicode 码的模式进行匹配。")]),t._v(" "),a("li",[t._v("y 执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用 y 标志")])]),t._v(" "),a("p",[t._v("为了在正则表达式中包含标志，请使用以下语法：")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("var re = /pattern/flags;")])])]),t._v(" "),a("p",[t._v("或者")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v('var re = new RegExp("pattern", "flags");')])])]),t._v(" "),a("p",[t._v("re = /\\w+\\s/g 将创建一个查找一个或多个字符后有一个空格的正则表达式，或者组合起来像此要求的字符串。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\w+\\s/g")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fee fi fo fum'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["fee ", "fi ", "fo "]')]),t._v("\n")])])]),a("p",[t._v('这段代码将输出 ["fee ", "fi ", "fo "]。在这个例子中，你可以将：')]),t._v(" "),a("blockquote",[a("p",[t._v("var re = /\\w+\\s/g;")])]),t._v(" "),a("p",[t._v("替换成：")]),t._v(" "),a("blockquote",[a("p",[t._v('var re = new RegExp("\\w+\\s", "g");')])]),t._v(" "),a("p",[t._v("使用.exec()方法时，与'g'标志关联的行为是不同的。 （“class”和“argument”的作用相反：在.match()的情况下，字符串类（或数据类型）拥有该方法，而正则表达式只是一个参数，而在.exec()的情况下，它是拥有该方法的正则表达式，其中字符串是参数。对比 str.match(re)与 re.exec(str) ), 'g'标志与.exec()方法一起使用获得迭代进展。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xArray\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// produces:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["fee ", index: 0, input: "fee fi fo fum"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["fi ", index: 4, input: "fee fi fo fum"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["fo ", index: 7, input: "fee fi fo fum"]')]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);