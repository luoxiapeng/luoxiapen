(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{486:function(a,v,_){"use strict";_.r(v);var i=_(1),e=Object(i.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[a._v("#")]),a._v(" 介绍")]),a._v(" "),_("p",[a._v("qiankun 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。")]),a._v(" "),_("p",[a._v("qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。")]),a._v(" "),_("h2",{attrs:{id:"什么是微前端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是微前端"}},[a._v("#")]),a._v(" 什么是微前端")]),a._v(" "),_("blockquote",[_("p",[a._v("微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。")])]),a._v(" "),_("p",[a._v("微前端架构具备以下几个核心价值：")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("技术栈无关")]),a._v(" "),_("ul",[_("li",[a._v("主框架不限制接入应用的技术栈，微应用具备完全自主权")])])]),a._v(" "),_("li",[_("p",[a._v("独立开发、独立部署")]),a._v(" "),_("ul",[_("li",[a._v("微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新")])])]),a._v(" "),_("li",[_("p",[a._v("增量升级")]),a._v(" "),_("ul",[_("li",[a._v("在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略")])])]),a._v(" "),_("li",[_("p",[a._v("独立运行时")]),a._v(" "),_("ul",[_("li",[a._v("每个微应用之间状态隔离，运行时状态不共享")])]),a._v(" "),_("p",[a._v("微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(Frontend Monolith)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。")])])]),a._v(" "),_("h2",{attrs:{id:"qiankun-的核心设计理念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#qiankun-的核心设计理念"}},[a._v("#")]),a._v(" qiankun 的核心设计理念")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("简单\n由于主应用微应用都能做到技术栈无关，qiankun 对于用户而言只是一个类似 jQuery 的库，你需要调用几个 qiankun 的 API 即可完成应用的微前端改造。同时由于 qiankun 的 HTML entry 及沙箱的设计，使得微应用的接入像使用 iframe 一样简单。")])]),a._v(" "),_("li",[_("p",[a._v("🍡 解耦/技术栈无关")]),a._v(" "),_("p",[a._v("微前端的核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，而 qiankun 的诸多设计均是秉持这一原则，如 HTML entry、沙箱、应用间通信等。这样才能确保微应用真正具备 独立开发、独立运行 的能力。")])])]),a._v(" "),_("h2",{attrs:{id:"为什么不是-iframe"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是-iframe"}},[a._v("#")]),a._v(" 为什么不是 iframe")]),a._v(" "),_("p",[a._v('为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 "炫技" 或者刻意追求 "特立独行"。')]),a._v(" "),_("p",[a._v("如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。")]),a._v(" "),_("p",[a._v("iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用")])]),a._v(" "),_("li",[_("p",[a._v("UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..")])]),a._v(" "),_("li",[_("p",[a._v("全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。")])]),a._v(" "),_("li",[_("p",[a._v("慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。")])])])])}),[],!1,null,null,null);v.default=e.exports}}]);