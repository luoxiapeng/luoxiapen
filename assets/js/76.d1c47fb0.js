(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{362:function(t,e,i){"use strict";i.r(e);var r=i(1),l=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"flutter-可滚动-widget-gridview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flutter-可滚动-widget-gridview"}},[t._v("#")]),t._v(" Flutter 可滚动 Widget —— GridView")]),t._v(" "),e("p",[t._v("GridView 是一个可以构建二维网格列表的 可滚动 Widget。")]),t._v(" "),e("h2",{attrs:{id:"gridview-的快速上手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gridview-的快速上手"}},[t._v("#")]),t._v(" GridView 的快速上手")]),t._v(" "),e("p",[t._v("GridView 和 ListView 一样，有五种用法：")]),t._v(" "),e("h3",{attrs:{id:"_1-使用默认的构造函数-给-children-属性赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用默认的构造函数-给-children-属性赋值"}},[t._v("#")]),t._v(" 1.使用默认的构造函数，给 children 属性赋值")]),t._v(" "),e("h4",{attrs:{id:"代码所在位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码所在位置"}},[t._v("#")]),t._v(" 代码所在位置")]),t._v(" "),e("p",[t._v("flutter_widget_demo/lib/gridview/GridViewDefaultWidget.dart")]),t._v(" "),e("h4",{attrs:{id:"使用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),e("p",[t._v("使用默认构造函数写 GridView，只适用于那些只有少量 子 Widget 的 GridView。")]),t._v(" "),e("p",[t._v("demo 如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'package:flutter/material.dart';\n\nvoid main() => runApp(GridViewDefaultWidget());\n\nclass GridViewDefaultWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Test',\n      home: Scaffold(\n          appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\n          body: GridView(\n            gridDelegate:\n                SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),\n            children: <Widget>[\n              ListTile(title: Text('Title1')),\n              ListTile(title: Text('Title2')),\n              ListTile(title: Text('Title3')),\n              ListTile(title: Text('Title4')),\n              ListTile(title: Text('Title5')),\n              ListTile(title: Text('Title6')),\n              ListTile(title: Text('Title7')),\n              ListTile(title: Text('Title8')),\n              ListTile(title: Text('Title9')),\n              ListTile(title: Text('Title10')),\n              ListTile(title: Text('Title11')),\n              ListTile(title: Text('Title12')),\n              ListTile(title: Text('Title13')),\n              ListTile(title: Text('Title14')),\n              ListTile(title: Text('Title15')),\n              ListTile(title: Text('Title16')),\n              ListTile(title: Text('Title17')),\n              ListTile(title: Text('Title18')),\n              ListTile(title: Text('Title19')),\n            ],\n          )),\n    );\n  }\n}\n")])])]),e("p",[t._v("运行效果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/9/16a00350cf908d83?w=428&h=768&f=png&s=54701",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_2-使用-gridview-count"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用-gridview-count"}},[t._v("#")]),t._v(" 2.使用 GridView.count")]),t._v(" "),e("h4",{attrs:{id:"代码所在位置-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码所在位置-2"}},[t._v("#")]),t._v(" 代码所在位置")]),t._v(" "),e("p",[t._v("flutter_widget_demo/lib/gridview/GridViewCountWidget.dart")]),t._v(" "),e("h4",{attrs:{id:"使用方法-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法-2"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),e("p",[t._v("GridView.count 的定义如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  GridView.count({\n    Key key,\n    Axis scrollDirection = Axis.vertical,\n    bool reverse = false,\n    ScrollController controller,\n    bool primary,\n    ScrollPhysics physics,\n    bool shrinkWrap = false,\n    EdgeInsetsGeometry padding,\n    @required int crossAxisCount,\n    double mainAxisSpacing = 0.0,\n    double crossAxisSpacing = 0.0,\n    double childAspectRatio = 1.0,\n    bool addAutomaticKeepAlives = true,\n    bool addRepaintBoundaries = true,\n    bool addSemanticIndexes = true,\n    double cacheExtent,\n    List<Widget> children = const <Widget>[],\n    int semanticChildCount,\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\n  })\n")])])]),e("p",[t._v("相比于默认构造函数，其实是将默认构造函数里的 gridDelegate 属性，拆分成了 crossAxisCount、mainAxisSpacing、crossAxisSpacing 和 childAspectRatio。")]),t._v(" "),e("p",[t._v("使用 GridView.count 的 demo 如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'package:flutter/material.dart';\n\nvoid main() => runApp(GridViewCountWidget());\n\nclass GridViewCountWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Test',\n      home: Scaffold(\n          appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\n          body: GridView.count(\n            crossAxisCount: 3,\n            children: <Widget>[\n              ListTile(title: Text('Title1')),\n              ListTile(title: Text('Title2')),\n              ListTile(title: Text('Title3')),\n              ListTile(title: Text('Title4')),\n              ListTile(title: Text('Title5')),\n              ListTile(title: Text('Title6')),\n              ListTile(title: Text('Title7')),\n              ListTile(title: Text('Title8')),\n              ListTile(title: Text('Title9')),\n              ListTile(title: Text('Title10')),\n              ListTile(title: Text('Title11')),\n              ListTile(title: Text('Title12')),\n              ListTile(title: Text('Title13')),\n              ListTile(title: Text('Title14')),\n              ListTile(title: Text('Title15')),\n              ListTile(title: Text('Title16')),\n              ListTile(title: Text('Title17')),\n              ListTile(title: Text('Title18')),\n              ListTile(title: Text('Title19')),\n            ],\n          )),\n    );\n  }\n}\n")])])]),e("p",[t._v("运行效果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/9/16a00350cf908d83?w=428&h=768&f=png&s=54701",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_3-使用-gridview-extent"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-gridview-extent"}},[t._v("#")]),t._v(" 3.使用 GridView.extent")]),t._v(" "),e("h4",{attrs:{id:"代码所在位置-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码所在位置-3"}},[t._v("#")]),t._v(" 代码所在位置")]),t._v(" "),e("p",[t._v("flutter_widget_demo/lib/gridview/GridViewExtentWidget.dart")]),t._v(" "),e("h4",{attrs:{id:"使用方法-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法-3"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),e("p",[t._v("GridView.extent 的定义如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  GridView.extent({\n    Key key,\n    Axis scrollDirection = Axis.vertical,\n    bool reverse = false,\n    ScrollController controller,\n    bool primary,\n    ScrollPhysics physics,\n    bool shrinkWrap = false,\n    EdgeInsetsGeometry padding,\n    @required double maxCrossAxisExtent,\n    double mainAxisSpacing = 0.0,\n    double crossAxisSpacing = 0.0,\n    double childAspectRatio = 1.0,\n    bool addAutomaticKeepAlives = true,\n    bool addRepaintBoundaries = true,\n    bool addSemanticIndexes = true,\n    List<Widget> children = const <Widget>[],\n    int semanticChildCount,\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\n  })\n")])])]),e("p",[t._v("这里类似于 GridView.count,因为 GridView.count 相当于 GridView+SliverGridDelegateWithFixedCrossAxisCount，而 GridView.extent 相当于 GridView+SliverGridDelegateWithFixedCrossAxisCount。")]),t._v(" "),e("p",[t._v("和 GridView.count 的布局算法不同。")]),t._v(" "),e("p",[t._v("使用 GridView.extent 的 demo 如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'package:flutter/material.dart';\n\nvoid main() => runApp(GridViewExtentWidget());\n\nclass GridViewExtentWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Test',\n      home: Scaffold(\n          appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\n          body: GridView.extent(\n            maxCrossAxisExtent: 300,\n            children: <Widget>[\n              ListTile(title: Text('Title1')),\n              ListTile(title: Text('Title2')),\n              ListTile(title: Text('Title3')),\n              ListTile(title: Text('Title4')),\n              ListTile(title: Text('Title5')),\n              ListTile(title: Text('Title6')),\n              ListTile(title: Text('Title7')),\n              ListTile(title: Text('Title8')),\n              ListTile(title: Text('Title9')),\n              ListTile(title: Text('Title10')),\n              ListTile(title: Text('Title11')),\n              ListTile(title: Text('Title12')),\n              ListTile(title: Text('Title13')),\n              ListTile(title: Text('Title14')),\n              ListTile(title: Text('Title15')),\n              ListTile(title: Text('Title16')),\n              ListTile(title: Text('Title17')),\n              ListTile(title: Text('Title18')),\n              ListTile(title: Text('Title19')),\n            ],\n          )),\n    );\n  }\n}\n")])])]),e("p",[t._v("运行效果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/9/16a0035889074fb6?w=428&h=768&f=png&s=45048",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_4-使用-gridview-builder-可用于和数据绑定实现大量或无限的列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用-gridview-builder-可用于和数据绑定实现大量或无限的列表"}},[t._v("#")]),t._v(" 4.使用 GridView.builder,可用于和数据绑定实现大量或无限的列表")]),t._v(" "),e("h4",{attrs:{id:"代码所在位置-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码所在位置-4"}},[t._v("#")]),t._v(" 代码所在位置")]),t._v(" "),e("p",[t._v("flutter_widget_demo/lib/gridview/GridViewBuilderWidget.dart")]),t._v(" "),e("h4",{attrs:{id:"使用方法-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法-4"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),e("p",[t._v("GridView.builder 可以和数据绑定，用于构建大量或无限的列表。而且只会构建那些实际可见的 子 Widget。")]),t._v(" "),e("p",[t._v("GridView.builder 的定义如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  GridView.builder({\n    Key key,\n    Axis scrollDirection = Axis.vertical,\n    bool reverse = false,\n    ScrollController controller,\n    bool primary,\n    ScrollPhysics physics,\n    bool shrinkWrap = false,\n    EdgeInsetsGeometry padding,\n    @required this.gridDelegate,\n    @required IndexedWidgetBuilder itemBuilder,\n    int itemCount,\n    bool addAutomaticKeepAlives = true,\n    bool addRepaintBoundaries = true,\n    bool addSemanticIndexes = true,\n    double cacheExtent,\n    int semanticChildCount,\n  })\n")])])]),e("p",[t._v("多了和 ListView.builder 类似的 itemCount 和 itemBuilder 属性，用法也是一样的:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'package:flutter/material.dart';\n\nvoid main() => runApp(GridViewBuilderWidget(\n      items: List<String>.generate(10000, (i) => \"Item $i\"),\n    ));\n\nclass GridViewBuilderWidget extends StatelessWidget {\n  final List<String> items;\n\n  GridViewBuilderWidget({Key key, @required this.items}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Test',\n      home: Scaffold(\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\n        body: GridView.builder(\n          gridDelegate:\n              SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 4),\n          itemCount: items.length,\n          itemBuilder: (context, index) {\n            return ListTile(\n              title: Text('${items[index]}'),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n")])])]),e("p",[t._v("运行效果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/9/16a0035bec84de94?w=428&h=768&f=png&s=69326",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_5-使用-gridview-custom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用-gridview-custom"}},[t._v("#")]),t._v(" 5.使用 GridView.custom")]),t._v(" "),e("h4",{attrs:{id:"代码所在位置-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码所在位置-5"}},[t._v("#")]),t._v(" 代码所在位置")]),t._v(" "),e("p",[t._v("flutter_widget_demo/lib/gridview/GridViewCustomWidget.dart")]),t._v(" "),e("h4",{attrs:{id:"使用方法-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法-5"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),e("p",[t._v("GridView.custom 的定义如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const GridView.custom({\n    Key key,\n    Axis scrollDirection = Axis.vertical,\n    bool reverse = false,\n    ScrollController controller,\n    bool primary,\n    ScrollPhysics physics,\n    bool shrinkWrap = false,\n    EdgeInsetsGeometry padding,\n    @required this.gridDelegate,\n    @required this.childrenDelegate,\n    double cacheExtent,\n    int semanticChildCount,\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\n  })\n")])])]),e("p",[t._v("增加了 childrenDelegate 的属性，类型为 SliverChildDelegate，具有定制 子 Widget 的能力，和 ListView.custom 里的一样，所以用法也一样:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'package:flutter/material.dart';\n\nvoid main() => runApp(GridViewCustomWidget(\n      items: List<String>.generate(10000, (i) => \"Item $i\"),\n    ));\n\nclass GridViewCustomWidget extends StatelessWidget {\n  final List<String> items;\n\n  GridViewCustomWidget({Key key, @required this.items}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Test',\n      home: Scaffold(\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\n        body: GridView.custom(\n          gridDelegate:\n              SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),\n          childrenDelegate: SliverChildListDelegate(<Widget>[\n            ListTile(title: Text('Title1')),\n            ListTile(title: Text('Title2')),\n            ListTile(title: Text('Title3')),\n            ListTile(title: Text('Title4')),\n            ListTile(title: Text('Title5')),\n            ListTile(title: Text('Title6')),\n            ListTile(title: Text('Title7')),\n            ListTile(title: Text('Title8')),\n            ListTile(title: Text('Title9')),\n            ListTile(title: Text('Title10')),\n            ListTile(title: Text('Title11')),\n            ListTile(title: Text('Title12')),\n            ListTile(title: Text('Title13')),\n            ListTile(title: Text('Title14')),\n            ListTile(title: Text('Title15')),\n            ListTile(title: Text('Title16')),\n            ListTile(title: Text('Title17')),\n            ListTile(title: Text('Title18')),\n            ListTile(title: Text('Title19')),\n          ]),\n        ),\n      ),\n    );\n  }\n}\n")])])]),e("p",[t._v("运行效果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/9/16a00350cf908d83?w=428&h=768&f=png&s=54701",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"gridview-的构造函数及参数说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gridview-的构造函数及参数说明"}},[t._v("#")]),t._v(" GridView 的构造函数及参数说明")]),t._v(" "),e("p",[t._v("GridView 的构造函数，会发现 GridView 的大部分属性都和 ListView 一样：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class GridView extends BoxScrollView {\n  GridView({\n    Key key,\n    Axis scrollDirection = Axis.vertical,\n    bool reverse = false,\n    ScrollController controller,\n    bool primary,\n    ScrollPhysics physics,\n    bool shrinkWrap = false,\n    EdgeInsetsGeometry padding,\n    @required this.gridDelegate,\n    bool addAutomaticKeepAlives = true,\n    bool addRepaintBoundaries = true,\n    bool addSemanticIndexes = true,\n    double cacheExtent,\n    List<Widget> children = const <Widget>[],\n    int semanticChildCount,\n  })\n  ...\n}\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("参数名字")]),t._v(" "),e("th",[t._v("参数类型")]),t._v(" "),e("th",[t._v("意义")]),t._v(" "),e("th",[t._v("必选 or 可选")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("key")]),t._v(" "),e("td",[t._v("Key")]),t._v(" "),e("td",[t._v("Widget 的标识")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("scrollDirection")]),t._v(" "),e("td",[t._v("Axis")]),t._v(" "),e("td",[t._v("滑动的方向"),e("br"),t._v("默认为 Axis.vertical，垂直方向可滑动")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("reverse")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("控制 GridView 里列表项的排列顺序，是按照插入顺序排，还是按照插入顺序相反的方向排序。"),e("br"),t._v("默认为 false，就是按照插入顺序排序，第一个插入的在头部"),e("br"),t._v("，当 reverse 为 true 时，第一个插入的会在底部")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("controller")]),t._v(" "),e("td",[t._v("ScrollController")]),t._v(" "),e("td",[t._v("可以控制 GridView 滚动的位置"),e("br"),t._v("ScrollController 提供以下的几个功能："),e("br"),t._v("1.设置 GridView 滑动的初始位置"),e("br"),t._v("2.可以控制 GridView 是否存储和恢复滑动的位置"),e("br"),t._v("3.可以读取、设置当前滑动的位置"),e("br"),t._v("可以继承 ScrollController 实现自定义的功能"),e("br"),t._v("当 primary 为 true 时，controller 必须为 null")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("primary")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否是与父级关联的主滚动视图"),e("br"),t._v("当为 true 时，即使 GridView 里没有足够的内容也能滑动")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("physics")]),t._v(" "),e("td",[t._v("ScrollPhysics")]),t._v(" "),e("td",[t._v("设置 GridView 的滚动效果"),e("br"),t._v("值必须为 ScrollPhysics 的子类，比如有如下的值："),e("br"),t._v("AlwaysScrollableScrollPhysics():可以让 GridView 里没有足够的内容也能滑动"),e("br"),t._v("ScrollPhysics():GridView 在没有足够的内容的时候不能滑动")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("shrinkWrap")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否根据列表项的总长度来设置 GridView 的长度，默认值为 false。"),e("br"),t._v("当 shrinkWrap 为 false 时，GridView 会在滚动方向扩展到可占用的最大空间"),e("br"),t._v("当 shrinkWrap 为 true 时，GridView 在滚动方向占用的空间就是其列表项的总长度，但是这样会很耗性能，因为当其列表项发生变化时，GridView 的大小会重新计算")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("padding")]),t._v(" "),e("td",[t._v("EdgeInsetsGeometry")]),t._v(" "),e("td",[t._v("GridView 的内边距")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("gridDelegate")]),t._v(" "),e("td",[t._v("SliverGridDelegate")]),t._v(" "),e("td",[t._v("控制 GridView 中 子 Widget 布局的委托。"),e("br"),t._v("SliverGridDelegate 的实现有两个："),e("br"),t._v("SliverGridDelegateWithMaxCrossAxisExtent：横轴 子 Widget 为固定长度的布局算法"),e("br"),t._v("SliverGridDelegateWithFixedCrossAxisCount：横轴 子 Widget 为固定数量的布局算法")]),t._v(" "),e("td",[t._v("必选")])]),t._v(" "),e("tr",[e("td",[t._v("addAutomaticKeepAlives")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否用 AutomaticKeepAlive 来包列表项,默认为 true"),e("br"),t._v("在一个 lazy list 里，如果 子 Widget 为了保证自己在滑出可视界面时不被回收，就需要把 addAutomaticKeepAlives 设为 true"),e("br"),t._v("当 子 Widget 不需要让自己保持存活时，为了提升性能，请把 addAutomaticKeepAlives 设为 false"),e("br"),t._v("如果 子 Widget 自己维护其 KeepAlive 状态，那么此参数必须置为 false。")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("addRepaintBoundaries")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否用 RepaintBoundary 来包列表项，默认为 true"),e("br"),t._v("当 addRepaintBoundaries 为 true 时，可以避免列表项重绘，提高性能"),e("br"),t._v("但是当列表项重绘的开销非常小（如一个颜色块，或者一个较短的文本）时，不添加 RepaintBoundary 反而会更高效。")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("addSemanticIndexes")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否用 IndexedSemantics 来包列表项,默认为 true"),e("br"),t._v("使用 IndexedSemantics 是为了正确的用于辅助模式")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("cacheExtent")]),t._v(" "),e("td",[t._v("double")]),t._v(" "),e("td",[t._v("GridView 可见部分的前面和后面的区域可以用来缓存列表项，"),e("br"),t._v("这部分区域的 item 即使不可见，也会加载出来，所以当滑动到这个区域的时候，缓存的区域就会变的可见，"),e("br"),t._v("cacheExtent 就表示缓存区域在可见部分的前面和后面有多少像素")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("children")]),t._v(" "),e("td",[t._v("List<Widget>")]),t._v(" "),e("td",[t._v("GridView 的列表项")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("semanticChildCount")]),t._v(" "),e("td",[t._v("int")]),t._v(" "),e("td",[t._v("提供语义信息的列表项的数量"),e("br"),t._v("默认为 GridView 的 item 的数量")]),t._v(" "),e("td",[t._v("可选")])])])])])}),[],!1,null,null,null);e.default=l.exports}}]);