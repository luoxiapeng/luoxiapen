(window.webpackJsonp=window.webpackJsonp||[]).push([[489],{776:function(t,s,a){"use strict";a.r(s);var e=a(1),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"如何建立连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何建立连接"}},[t._v("#")]),t._v(" 如何建立连接")]),t._v(" "),s("p",[t._v("前面提到，WebSocket 复用了 HTTP 的握手通道。具体指的是，客户端通过 HTTP 请求与 WebSocket 服务端协商升级协议。协议升级完成后，后续的数据交换则遵照 WebSocket 的协议。")]),t._v(" "),s("h2",{attrs:{id:"客户端-申请协议升级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端-申请协议升级"}},[t._v("#")]),t._v(" 客户端：申请协议升级")]),t._v(" "),s("p",[t._v("首先，客户端发起协议升级请求。可以看到，采用的是标准的 HTTP 报文格式，且只支持 GET 方法。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Host")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" localhost"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Origin")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Connection")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Upgrade\n"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Upgrade")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" websocket\nSec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("WebSocket"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Version"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v("\nSec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("WebSocket"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" w4v7O6xFTi36lq3RNcgctw"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n\n")])])]),s("p",[t._v("重点请求首部意义如下：")]),t._v(" "),s("ul",[s("li",[t._v("Connection: Upgrade：表示要升级协议")]),t._v(" "),s("li",[t._v("Upgrade: websocket：表示要升级到 websocket 协议。")]),t._v(" "),s("li",[t._v("Sec-WebSocket-Version: 13：表示 websocket 的版本。如果服务端不支持该版本，需要返回一个 Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。")]),t._v(" "),s("li",[t._v("Sec-WebSocket-Key：与后面服务端响应首部的 Sec-WebSocket-Accept 是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意，上面请求省略了部分非重点请求首部。由于是标准的 HTTP 请求，类似 Host、Origin、Cookie 等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。")])]),t._v(" "),s("h2",{attrs:{id:"服务端-响应协议升级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端-响应协议升级"}},[t._v("#")]),t._v(" 服务端：响应协议升级")]),t._v(" "),s("p",[t._v("服务端返回内容如下，状态代码 101 表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),t._v(" Switching Protocols\n"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Connection")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Upgrade\n"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Upgrade")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" websocket\nSec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("WebSocket"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Accept"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Oy4NRAQ13jhfONC7bP8dTKb4PTU"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n\n")])])]),s("blockquote",[s("p",[t._v("备注：每个 header 都以\\r\\n 结尾，并且最后一行加上一个额外的空行\\r\\n。此外，服务端回应的 HTTP 状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。")])]),t._v(" "),s("h2",{attrs:{id:"sec-websocket-accept-的计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sec-websocket-accept-的计算"}},[t._v("#")]),t._v(" Sec-WebSocket-Accept 的计算")]),t._v(" "),s("p",[t._v("Sec-WebSocket-Accept 根据客户端请求首部的 Sec-WebSocket-Key 计算出来。")]),t._v(" "),s("p",[t._v("计算公式为：")]),t._v(" "),s("ul",[s("li",[t._v("将 Sec-WebSocket-Key 跟 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 拼接。")]),t._v(" "),s("li",[t._v("通过 SHA1 计算出摘要，并转成 base64 字符串。")])]),t._v(" "),s("p",[t._v("伪代码如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toBase64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sha1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Sec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("WebSocket"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" 258EAFA5"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E914")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("47DA"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("95CA"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C5AB0DC85B11")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("验证下前面的返回结果：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" magic "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" secWebSocketKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'w4v7O6xFTi36lq3RNcgctw=='")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" secWebSocketAccept "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secWebSocketKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" magic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'base64'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secWebSocketAccept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Oy4NRAQ13jhfONC7bP8dTKb4PTU=")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);