(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{479:function(e,a,t){"use strict";t.r(a);var v=t(42),s=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"预定义函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预定义函数"}},[e._v("#")]),e._v(" 预定义函数")]),e._v(" "),t("p",[e._v("JavaScript 语言有好些个顶级的内建函数：")]),e._v(" "),t("h2",{attrs:{id:"eval"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eval"}},[e._v("#")]),e._v(" eval()")]),e._v(" "),t("p",[t("code",[e._v("eval()")]),e._v("方法会对一串字符串形式的"),t("code",[e._v("JavaScrip")]),e._v("t 代码字符求值。")]),e._v(" "),t("h2",{attrs:{id:"uneval"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uneval"}},[e._v("#")]),e._v(" uneval()")]),e._v(" "),t("p",[t("code",[e._v("uneval()")]),e._v("方法创建的一个 Object 的源代码的字符串表示。")]),e._v(" "),t("h2",{attrs:{id:"isfinite"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#isfinite"}},[e._v("#")]),e._v(" isFinite()")]),e._v(" "),t("p",[t("code",[e._v("isFinite()")]),e._v("函数判断传入的值是否是有限的数值。 如果需要的话，其参数首先被转换为一个数值。")]),e._v(" "),t("h2",{attrs:{id:"isnan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#isnan"}},[e._v("#")]),e._v(" isNaN()")]),e._v(" "),t("p",[t("code",[e._v("isNaN()")]),e._v("函数判断一个值是否是 NaN。注意：isNaN 函数内部的强制转换规则十分有趣； 另一个可供选择的是 ECMAScript 6 中定义 Number.isNaN() , 或者使用 "),t("code",[e._v("typeof")]),e._v("来判断数值类型。")]),e._v(" "),t("h2",{attrs:{id:"parsefloat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parsefloat"}},[e._v("#")]),e._v(" parseFloat()")]),e._v(" "),t("p",[t("code",[e._v("parseFloat()")]),e._v(" 函数解析字符串参数，并返回一个浮点数。")]),e._v(" "),t("h2",{attrs:{id:"parseint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parseint"}},[e._v("#")]),e._v(" parseInt()")]),e._v(" "),t("p",[t("code",[e._v("parseInt()")]),e._v("函数解析字符串参数，并返回指定的基数（基础数学中的数制）的整数。")]),e._v(" "),t("h2",{attrs:{id:"decodeuri"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decodeuri"}},[e._v("#")]),e._v(" decodeURI()")]),e._v(" "),t("p",[t("code",[e._v("decodeURI()")]),e._v(" 函数对先前经过 encodeURI 函数或者其他类似方法编码过的字符串进行解码。")]),e._v(" "),t("h2",{attrs:{id:"decodeuricomponent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decodeuricomponent"}},[e._v("#")]),e._v(" decodeURIComponent()")]),e._v(" "),t("p",[t("code",[e._v("decodeURIComponent()")]),e._v("方法对先前经过"),t("code",[e._v("encodeURIComponent")]),e._v("函数或者其他类似方法编码过的字符串进行解码。")]),e._v(" "),t("h2",{attrs:{id:"encodeuri"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encodeuri"}},[e._v("#")]),e._v(" encodeURI()")]),e._v(" "),t("p",[t("code",[e._v("encodeURI()")]),e._v("方法通过用以一个，两个，三个或四个转义序列表示字符的 UTF-8 编码替换统一资源标识符（URI）的某些字符来进行编码（每个字符对应四个转义序列，这四个序列组了两个”替代“字符）。")]),e._v(" "),t("h2",{attrs:{id:"encodeuricomponent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encodeuricomponent"}},[e._v("#")]),e._v(" encodeURIComponent()")]),e._v(" "),t("p",[t("code",[e._v("encodeURIComponent()")]),e._v(" 方法通过用以一个，两个，三个或四个转义序列表示字符的 UTF-8 编码替换统一资源标识符（URI）的每个字符来进行编码（每个字符对应四个转义序列，这四个序列组了两个”替代“字符）。")]),e._v(" "),t("h2",{attrs:{id:"escape"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#escape"}},[e._v("#")]),e._v(" escape()")]),e._v(" "),t("p",[e._v("已废弃的 "),t("code",[e._v("escape()")]),e._v(" 方法计算生成一个新的字符串，其中的某些字符已被替换为十六进制转义序列。使用 "),t("code",[e._v("encodeURI")]),e._v("或者"),t("code",[e._v("encodeURIComponent")]),e._v("替代本方法。")]),e._v(" "),t("h2",{attrs:{id:"unescape"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unescape"}},[e._v("#")]),e._v(" unescape()")]),e._v(" "),t("p",[e._v("已废弃的 "),t("code",[e._v("unescape()")]),e._v(" 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换。上述的转义序列就像"),t("code",[e._v("escape")]),e._v("里介绍的一样。因为 "),t("code",[e._v("unescape")]),e._v(" 已经废弃，建议使用"),t("code",[e._v("decodeURI()")]),e._v("或者"),t("code",[e._v("decodeURIComponent")]),e._v(" 替代本方法。")])])}),[],!1,null,null,null);a.default=s.exports}}]);