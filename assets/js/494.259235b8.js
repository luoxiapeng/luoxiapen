(window.webpackJsonp=window.webpackJsonp||[]).push([[494],{781:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据掩码的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据掩码的作用"}},[t._v("#")]),t._v(" 数据掩码的作用")]),t._v(" "),s("p",[t._v("WebSocket 协议中，数据掩码的作用是增强协议的安全性。但数据掩码并不是为了保护数据本身，因为算法本身是公开的，运算也不复杂。除了加密通道本身，似乎没有太多有效的保护通信安全的办法。")]),t._v(" "),s("p",[t._v("那么为什么还要引入掩码计算呢，除了增加计算机器的运算量外似乎并没有太多的收益（这也是不少同学疑惑的点）。")]),t._v(" "),s("p",[t._v("答案还是两个字：安全。但并不是为了防止数据泄密，而是为了防止早期版本的协议中存在的代理缓存污染攻击（proxy cache poisoning attacks）等问题。")]),t._v(" "),s("h2",{attrs:{id:"代理缓存污染攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理缓存污染攻击"}},[t._v("#")]),t._v(" 代理缓存污染攻击")]),t._v(" "),s("p",[t._v("下面摘自 2010 年关于安全的一段讲话。其中提到了代理服务器在协议实现上的缺陷可能导致的安全问题。猛击出处。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("“We show"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" empirically"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" that the current version "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" the WebSocket consent mechanism is vulnerable to proxy cache poisoning attacks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" Even though the WebSocket handshake is based on "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" which should be understood by most network intermediaries"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" the handshake uses the esoteric “Upgrade” mechanism "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" In our experiment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" we find that many proxies "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" not implement the Upgrade mechanism properly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" which causes the handshake to succeed even though subsequent traffic over the socket will be misinterpreted by the proxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("”\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TALKING")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  Huang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Chen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Barth"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rescorla"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" and "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("          Jackson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Talking to Yourself for Fun and Profit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n")])])]),s("p",[t._v("在正式描述攻击步骤之前，我们假设有如下参与者：")]),t._v(" "),s("ul",[s("li",[t._v("攻击者、攻击者自己控制的服务器（简称“邪恶服务器”）、攻击者伪造的资源（简称“邪恶资源”）")]),t._v(" "),s("li",[t._v("受害者、受害者想要访问的资源（简称“正义资源”）")]),t._v(" "),s("li",[t._v("受害者实际想要访问的服务器（简称“正义服务器”）")]),t._v(" "),s("li",[t._v("中间代理服务器")])]),t._v(" "),s("p",[t._v("攻击步骤一：")]),t._v(" "),s("ul",[s("li",[t._v("攻击者浏览器 向 邪恶服务器 发起 WebSocket 连接。根据前文，首先是一个协议升级请求。")]),t._v(" "),s("li",[t._v("协议升级请求 实际到达 代理服务器。")]),t._v(" "),s("li",[t._v("代理服务器 将协议升级请求转发到 邪恶服务器。")]),t._v(" "),s("li",[t._v("邪恶服务器 同意连接，代理服务器 将响应转发给 攻击者。")])]),t._v(" "),s("p",[t._v("由于 upgrade 的实现上有缺陷，代理服务器 以为之前转发的是普通的 HTTP 消息。因此，当协议服务器 同意连接，代理服务器 以为本次会话已经结束。")]),t._v(" "),s("p",[t._v("攻击步骤二：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("攻击者 在之前建立的连接上，通过 WebSocket 的接口向 邪恶服务器 发送数据，且数据是精心构造的 HTTP 格式的文本。其中包含了 正义资源 的地址，以及一个伪造的 host（指向正义服务器）。（见后面报文）")])]),t._v(" "),s("li",[s("p",[t._v("请求到达 代理服务器 。虽然复用了之前的 TCP 连接，但 代理服务器 以为是新的 HTTP 请求。")])]),t._v(" "),s("li",[s("p",[t._v("代理服务器 向 邪恶服务器 请求 邪恶资源。")])]),t._v(" "),s("li",[s("p",[t._v("邪恶服务器 返回 邪恶资源。代理服务器 缓存住 邪恶资源（url 是对的，但 host 是 正义服务器 的地址）。")])])]),t._v(" "),s("p",[t._v("到这里，受害者可以登场了：")]),t._v(" "),s("ul",[s("li",[t._v("受害者 通过 代理服务器 访问 正义服务器 的 正义资源。")]),t._v(" "),s("li",[t._v("代理服务器 检查该资源的 url、host，发现本地有一份缓存（伪造的）。")]),t._v(" "),s("li",[t._v("代理服务器 将 邪恶资源 返回给 受害者。")]),t._v(" "),s("li",[t._v("受害者 卒。")])]),t._v(" "),s("p",[t._v("附：前面提到的精心构造的“HTTP 请求报文”。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Client → Server"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("attackers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("choice "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Host")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("attackers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("choice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com Sec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("WebSocket"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("connection"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nServer → Client"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v("\nSec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("WebSocket"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Accept"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("connection"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"当前解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#当前解决方案"}},[t._v("#")]),t._v(" 当前解决方案")]),t._v(" "),s("p",[t._v("最初的提案是对数据进行加密处理。基于安全、效率的考虑，最终采用了折中的方案：对数据载荷进行掩码处理。\n需要注意的是，这里只是限制了浏览器对数据载荷进行掩码处理，但是坏人完全可以实现自己的 WebSocket 客户端、服务端，不按规则来，攻击可以照常进行。\n但是对浏览器加上这个限制后，可以大大增加攻击的难度，以及攻击的影响范围。如果没有这个限制，只需要在网上放个钓鱼网站骗人去访问，一下子就可以在短时间内展开大范围的攻击。")]),t._v(" "),s("p",[t._v("WebSocket 可写的东西还挺多，比如 WebSocket 扩展。客户端、服务端之间是如何协商、使用扩展的。WebSocket 扩展可以给协议本身增加很多能力和想象空间，比如数据的压缩、加密，以及多路复用等。")])])}),[],!1,null,null,null);s.default=n.exports}}]);