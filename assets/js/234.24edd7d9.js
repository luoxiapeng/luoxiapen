(window.webpackJsonp=window.webpackJsonp||[]).push([[234],{595:function(t,s,a){"use strict";a.r(s);var e=a(42),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"基本配置和测试覆盖率生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本配置和测试覆盖率生成"}},[t._v("#")]),t._v(" 基本配置和测试覆盖率生成")]),t._v(" "),a("p",[t._v("，其实我们没有对 Jest 进行任何的配置，直接使用就可以进行最简单的基本测试，这是因为 Jest 是有一些默认配置的，这些默认配置就可以帮助我们完成前端自动化测试。但实际工作中不可能一直使用默认配置，会根据实际需求进行一些配置修改的")]),t._v(" "),a("p",[t._v("::: 在学习之前我们先来回答小伙伴问的一个问题，就是什么是“单元测试”?什么是“集成测试”?")]),t._v(" "),a("h2",{attrs:{id:"单元测试和集成测试的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试和集成测试的区别"}},[t._v("#")]),t._v(" 单元测试和集成测试的区别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("单元测试：英文是(unit testing) 单,是指对软件中的最小可测试单元进行检查和验证。前端所说的单元测试就是对一个模块进行测试。也就是说前端测试的时候，你测试的东西一定是一个模块。")])]),t._v(" "),a("li",[a("p",[t._v("集成测试：也叫组装测试或者联合测试。在单元测试的基础上，将所有模块按照涉及要求组装成为子系统或系统，进行集成测试。")])])]),t._v(" "),a("p",[t._v("随着前端的发展，现在无论我们些 React 还是写 Vue，其实代码已经全部都模块化了，所以使用 Jest 测试不需要额外加入任何的操作了。")]),t._v(" "),a("h2",{attrs:{id:"jest-初始化配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jest-初始化配置"}},[t._v("#")]),t._v(" Jest 初始化配置")]),t._v(" "),a("p",[t._v("问题回答完了，我们开始正式内容，我们可以直接使用 npx 命令来进行初始化")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("npx jest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("init\n")])])]),a("p",[t._v("之后会有一些选项，你根据自己的需要进行选择就可以了：")]),t._v(" "),a("ul",[a("li",[t._v("Choose the test environment that will be used for testing ? 代码是运行在 Node 环境还是 Web 环境下？")]),t._v(" "),a("li",[t._v("Do you want Jest to add coverage reports ? 是否生成测试覆盖率文件？")]),t._v(" "),a("li",[t._v("Automatically clear mock calls and instrances between every test?是否需要在测试之后清楚模拟调用的一些东西？")])]),t._v(" "),a("p",[t._v("在这三个选项选择之后，你会发现你的工程根目录下多了一个 jest.config.js 的文件。打开文件你可以看到里边有很多 Jest 的配置项。")]),t._v(" "),a("h2",{attrs:{id:"coveragedirectory-详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coveragedirectory-详解"}},[t._v("#")]),t._v(" coverageDirectory 详解")]),t._v(" "),a("p",[t._v("先来了解一个概念 code coverage,代码测试覆盖率，就是我们的测试代码，对功能性代码和业务逻辑代码作了百分多少的测试，这个百分比，就叫做代码测试覆盖率。")]),t._v(" "),a("p",[t._v("coverageDirectroy 的配置是用来打开代码覆盖率的，如果我们把代码写成下面的样子,就说明打开了代码覆盖率的这个选项。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("coverageDirectory"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'coverage'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//打开测试覆盖率选项")]),t._v("\n")])])]),a("p",[t._v("当这个选项被打开后，我们就可以使用下面的命令,jest 就会自动给我们生成一个代码测试覆盖率的说明。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" npx jest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("coverage\n")])])]),a("p",[t._v("当然这个不仅会有一个简单的终端图表，还会生成一个 coverage 的文件夹，这里边有很多文件。")]),t._v(" "),a("img",{attrs:{src:"http://newimg.dmz.com/jestTest2020042701.png"}}),t._v(" "),a("p",[t._v("我们可以打开 coverage-lcov-reporrt-index.html 文件，这时候就可以看到一个网页形式的，非常漂亮的测试覆盖率报告。")]),t._v(" "),a("img",{attrs:{src:"http://newimg.dmz.com/jestTest2020042702.png"}}),t._v(" "),a("p",[t._v('那这个配置项可以作什么配置那？我们先来作一个修改，把 coverageDirectory : "coverage" 改为 coverageDirectory : "dmz",然后再使用 npx jest --coverage,这时候你会发现，生成的报告文件夹，不再是 coverage 而是变成了 dmz。')]),t._v(" "),a("p",[t._v("** 有的小伙伴这时候可能对 npx，这个命令不太熟悉，它到底是什么命令那?**")]),t._v(" "),a("p",[t._v("其实我作下面这样一个才做，你就能立刻明白 npx 的作用了，我们可以打开 package.json 文件，然后在里边作这样的修改。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jesttest"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"description"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jest"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coverage"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jest --coverage"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"author"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"license"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ISC"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"devDependencies"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jest"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^24.8.0"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这时候你就可以使用 yarn coverage 来进行生成代码测试覆盖率的文件了。\n主要学了如何快速生成 jest.config.js 配置文件和 coverageDirecotry 配置项的详细介绍")])])}),[],!1,null,null,null);s.default=r.exports}}]);