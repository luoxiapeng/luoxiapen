(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{360:function(t,e,i){"use strict";i.r(e);var r=i(1),l=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"flutter-可滚动-widget-listview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flutter-可滚动-widget-listview"}},[t._v("#")]),t._v(" Flutter 可滚动 Widget —— ListView")]),t._v(" "),e("p",[t._v("ListView 是可以线性排列 子 Widget 的可滚动 Widget。ListView 可以和数据绑定用来实现瀑布流。")]),t._v(" "),e("h2",{attrs:{id:"listview-的快速上手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#listview-的快速上手"}},[t._v("#")]),t._v(" ListView 的快速上手")]),t._v(" "),e("p",[t._v("有四种使用 ListView 的方法：")]),t._v(" "),e("h3",{attrs:{id:"_1-使用默认的构造函数-给-children-属性赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用默认的构造函数-给-children-属性赋值"}},[t._v("#")]),t._v(" 1.使用默认的构造函数，给 children 属性赋值")]),t._v(" "),e("h4",{attrs:{id:"代码所在位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码所在位置"}},[t._v("#")]),t._v(" 代码所在位置")]),t._v(" "),e("p",[t._v("flutter_widget_demo/lib/listview/ListViewDefaultWidget.dart")]),t._v(" "),e("h4",{attrs:{id:"使用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),e("p",[t._v("使用默认构造函数写 ListView，需要给 children 属性赋值，但只适用于那些只有少量 子 Widget 的 ListView,ListView 创建的时候，其 子 Widget 也会一起创建。")]),t._v(" "),e("p",[t._v("Demo 如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'package:flutter/material.dart';\n\nmain() => runApp(new ListViewDefaultWidget());\n\nclass ListViewDefaultWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n        title: 'Test',\n        home: new Scaffold(\n            appBar:\n                new AppBar(title: new Text('Flutter 可滚动Widget -- ListView')),\n            body: ListView(\n              children: <Widget>[\n                ListTile(title: Text('Title1')),\n                ListTile(title: Text('Title2')),\n                ListTile(title: Text('Title3')),\n                ListTile(title: Text('Title4')),\n                ListTile(title: Text('Title5')),\n                ListTile(title: Text('Title6')),\n                ListTile(title: Text('Title7')),\n                ListTile(title: Text('Title8')),\n                ListTile(title: Text('Title9')),\n                ListTile(title: Text('Title10')),\n                ListTile(title: Text('Title11')),\n                ListTile(title: Text('Title12')),\n                ListTile(title: Text('Title13')),\n                ListTile(title: Text('Title14')),\n                ListTile(title: Text('Title15')),\n                ListTile(title: Text('Title16')),\n                ListTile(title: Text('Title17')),\n                ListTile(title: Text('Title18')),\n                ListTile(title: Text('Title19')),\n              ],\n            )));\n  }\n}\n")])])]),e("p",[t._v("运行效果为：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/9/16a0030d4ed358bc?w=428&h=768&f=png&s=51013",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_2-使用-listview-builder-可用于和数据绑定实现大量或无限的列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用-listview-builder-可用于和数据绑定实现大量或无限的列表"}},[t._v("#")]),t._v(" 2.使用 ListView.builder,可用于和数据绑定实现大量或无限的列表")]),t._v(" "),e("h4",{attrs:{id:"代码所在位置-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码所在位置-2"}},[t._v("#")]),t._v(" 代码所在位置")]),t._v(" "),e("p",[t._v("flutter_widget_demo/lib/listview/ListViewBuilderWidget.dart")]),t._v(" "),e("h4",{attrs:{id:"使用方法-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法-2"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),e("p",[t._v("ListView.builder 可以用于构建大量或无限的列表，是因为 ListView.builder 只会构建那些实际可见的 子 Widget。")]),t._v(" "),e("p",[t._v("ListView.builder 的定义为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  ListView.builder({\n    Key key,\n    Axis scrollDirection = Axis.vertical,\n    bool reverse = false,\n    ScrollController controller,\n    bool primary,\n    ScrollPhysics physics,\n    bool shrinkWrap = false,\n    EdgeInsetsGeometry padding,\n    this.itemExtent,\n    @required IndexedWidgetBuilder itemBuilder,\n    int itemCount,\n    bool addAutomaticKeepAlives = true,\n    bool addRepaintBoundaries = true,\n    bool addSemanticIndexes = true,\n    double cacheExtent,\n    int semanticChildCount,\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\n  })\n    ...\n")])])]),e("p",[t._v("大部分属性都和 ListView 的默认构造函数一样，除了这两个：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("int itemCount")]),t._v(" "),e("p",[t._v("代表 子 Widget 的数量，虽然是可选的，但是还是建议赋值，可以让 ListView 预估最大滑动距离，从而提升性能。如果为 null，则子节点数由[itemBuilder]返回 null 的最小索引确定。")])]),t._v(" "),e("li",[e("p",[t._v("@required IndexedWidgetBuilder itemBuilder")]),t._v(" "),e("p",[t._v("itemBuilder 用于创建实际可见的 子 Widget，只有索引大于或等于零且小于 itemCount 才会调用 itemBuilder。")])])]),t._v(" "),e("p",[t._v("下面写一个数据和 ListView.builder 绑定使用的例子:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'package:flutter/material.dart';\n\nvoid main() => runApp(ListViewBuilderWidget(\n      items: List<String>.generate(10000, (i) => \"Item $i\"),\n    ));\n\nclass ListViewBuilderWidget extends StatelessWidget {\n  final List<String> items;\n\n  ListViewBuilderWidget({Key key, @required this.items}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Test',\n      home: Scaffold(\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- ListView')),\n        body: ListView.builder(\n          itemCount: items.length,\n          itemBuilder: (context, index) {\n            return ListTile(\n              title: Text('${items[index]}'),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n")])])]),e("p",[t._v("运行后的效果为：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/9/16a0031169d33646?w=428&h=768&f=png&s=51443",alt:""}})]),t._v(" "),e("p",[t._v("要实现一个无限循环列表，只要不给 itemCount 赋值就行，如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ListView.builder(\n    padding: EdgeInsets.all(8.0),\n    itemBuilder: (BuildContext context, int index) {\n        return ListTile(title: Text('Title $index'),);\n    },\n)\n")])])]),e("h3",{attrs:{id:"_3-使用-listview-separated-具有分割项的-listview-builder"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-listview-separated-具有分割项的-listview-builder"}},[t._v("#")]),t._v(" 3.使用 ListView.separated，具有分割项的 ListView.builder")]),t._v(" "),e("h4",{attrs:{id:"代码所在位置-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码所在位置-3"}},[t._v("#")]),t._v(" 代码所在位置")]),t._v(" "),e("p",[t._v("flutter_widget_demo/lib/listview/ListViewSeparatedWidget.dart")]),t._v(" "),e("h4",{attrs:{id:"使用方法-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法-3"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),e("p",[t._v("看 ListView.separated 的定义：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ListView.separated({\n    Key key,\n    Axis scrollDirection = Axis.vertical,\n    bool reverse = false,\n    ScrollController controller,\n    bool primary,\n    ScrollPhysics physics,\n    bool shrinkWrap = false,\n    EdgeInsetsGeometry padding,\n    @required IndexedWidgetBuilder itemBuilder,\n    @required IndexedWidgetBuilder separatorBuilder,\n    @required int itemCount,\n    bool addAutomaticKeepAlives = true,\n    bool addRepaintBoundaries = true,\n    bool addSemanticIndexes = true,\n    double cacheExtent,\n  })\n  ...\n")])])]),e("p",[t._v("相比 ListView.builder 多了一个 separatorBuilder，separatorBuilder 就是用于构建分割项的，而且 itemBuilder、separatorBuilder、itemCount 都是必选的。")]),t._v(" "),e("p",[t._v("使用的 demo 如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'package:flutter/material.dart';\n\nvoid main() => runApp(ListViewSeparatedWidget(\n      items: List<String>.generate(10000, (i) => \"Item $i\"),\n    ));\n\nclass ListViewSeparatedWidget extends StatelessWidget {\n  final List<String> items;\n\n  ListViewSeparatedWidget({Key key, @required this.items}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Test',\n      home: Scaffold(\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- ListView')),\n        body: ListView.separated(\n          itemCount: items.length,\n          itemBuilder: (context, index) {\n            return ListTile(\n              title: Text('${items[index]}'),\n            );\n          },\n          separatorBuilder: (context, index) {\n            return Container(\n              constraints: BoxConstraints.tightFor(height: 10),\n              color: Colors.orange,\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n")])])]),e("p",[t._v("运行效果为：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/9/16a003177d842417?w=428&h=768&f=png&s=55038",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_4-使用-listview-custom-需要使用-sliverchilddelegate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用-listview-custom-需要使用-sliverchilddelegate"}},[t._v("#")]),t._v(" 4.使用 ListView.custom，需要使用 SliverChildDelegate")]),t._v(" "),e("h4",{attrs:{id:"代码所在位置-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码所在位置-4"}},[t._v("#")]),t._v(" 代码所在位置")]),t._v(" "),e("p",[t._v("flutter_widget_demo/lib/listview/ListViewCustomWidget.dart")]),t._v(" "),e("h4",{attrs:{id:"使用方法-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法-4"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),e("p",[t._v("SliverChildDelegate 提供了定制 子 Widget 的能力。")]),t._v(" "),e("p",[t._v("首先看 ListView.custom 的定义：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  const ListView.custom({\n    Key key,\n    Axis scrollDirection = Axis.vertical,\n    bool reverse = false,\n    ScrollController controller,\n    bool primary,\n    ScrollPhysics physics,\n    bool shrinkWrap = false,\n    EdgeInsetsGeometry padding,\n    this.itemExtent,\n    @required this.childrenDelegate,\n    double cacheExtent,\n    int semanticChildCount,\n  })\n")])])]),e("p",[t._v("childrenDelegate 为必选参数，在看如何实现 SliverChildDelegate，发现 SliverChildDelegate 是一个抽象类，SliverChildDelegate 的 build 方法可以对单个 子 Widget 进行自定义处理，而且 SliverChildDelegate 有个默认实现 SliverChildListDelegate，所以我们用 SliverChildListDelegate 来实现 ListView.custom，代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'package:flutter/material.dart';\n\nvoid main() => runApp(ListViewCustomWidget(\n      items: List<String>.generate(10000, (i) => \"Item $i\"),\n    ));\n\nclass ListViewCustomWidget extends StatelessWidget {\n  final List<String> items;\n\n  ListViewCustomWidget({Key key, @required this.items}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Test',\n      home: Scaffold(\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- ListView')),\n        body: ListView.custom(\n          childrenDelegate: SliverChildListDelegate(<Widget>[\n            ListTile(title: Text('Title1')),\n            ListTile(title: Text('Title2')),\n            ListTile(title: Text('Title3')),\n            ListTile(title: Text('Title4')),\n            ListTile(title: Text('Title5')),\n            ListTile(title: Text('Title6')),\n            ListTile(title: Text('Title7')),\n            ListTile(title: Text('Title8')),\n            ListTile(title: Text('Title9')),\n            ListTile(title: Text('Title10')),\n            ListTile(title: Text('Title11')),\n            ListTile(title: Text('Title12')),\n            ListTile(title: Text('Title13')),\n            ListTile(title: Text('Title14')),\n            ListTile(title: Text('Title15')),\n            ListTile(title: Text('Title16')),\n            ListTile(title: Text('Title17')),\n            ListTile(title: Text('Title18')),\n            ListTile(title: Text('Title19')),\n          ]),\n        ),\n      ),\n    );\n  }\n}\n")])])]),e("p",[t._v("运行效果为：\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/9/16a0030d4ed358bc?w=428&h=768&f=png&s=51013",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"listview-的构造函数及参数使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#listview-的构造函数及参数使用"}},[t._v("#")]),t._v(" ListView 的构造函数及参数使用")]),t._v(" "),e("p",[t._v("首先看 ListView 的构造函数:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class ListView extends BoxScrollView {\n  ListView({\n    Key key,\n    Axis scrollDirection = Axis.vertical,\n    bool reverse = false,\n    ScrollController controller,\n    bool primary,\n    ScrollPhysics physics,\n    bool shrinkWrap = false,\n    EdgeInsetsGeometry padding,\n    this.itemExtent,\n    bool addAutomaticKeepAlives = true,\n    bool addRepaintBoundaries = true,\n    bool addSemanticIndexes = true,\n    double cacheExtent,\n    List<Widget> children = const <Widget>[],\n    int semanticChildCount,\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\n  })\n    ...\n}\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("参数名字")]),t._v(" "),e("th",[t._v("参数类型")]),t._v(" "),e("th",[t._v("意义")]),t._v(" "),e("th",[t._v("必选 or 可选")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("key")]),t._v(" "),e("td",[t._v("Key")]),t._v(" "),e("td",[t._v("Widget 的标识")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("scrollDirection")]),t._v(" "),e("td",[t._v("Axis")]),t._v(" "),e("td",[t._v("滑动的方向"),e("br"),t._v("默认为 Axis.vertical，垂直方向可滑动")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("reverse")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("控制 ListView 里列表项的排列顺序，是按照插入顺序排，还是按照插入顺序相反的方向排序。"),e("br"),t._v("默认为 false，就是按照插入顺序排序，第一个插入的在头部"),e("br"),t._v("，当 reverse 为 true 时，第一个插入的会在底部")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("controller")]),t._v(" "),e("td",[t._v("ScrollController")]),t._v(" "),e("td",[t._v("可以控制 ListView 滚动的位置"),e("br"),t._v("ScrollController 提供以下的几个功能："),e("br"),t._v("1.设置 ListView 滑动的初始位置"),e("br"),t._v("2.可以控制 ListView 是否存储和恢复滑动的位置"),e("br"),t._v("3.可以读取、设置当前滑动的位置"),e("br"),t._v("可以继承 ScrollController 实现自定义的功能"),e("br"),t._v("当 primary 为 true 时，controller 必须为 null")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("primary")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否是与父级关联的主滚动视图"),e("br"),t._v("当为 true 时，即使 ListView 里没有足够的内容也能滑动")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("physics")]),t._v(" "),e("td",[t._v("ScrollPhysics")]),t._v(" "),e("td",[t._v("设置 ListView 的滚动效果"),e("br"),t._v("值必须为 ScrollPhysics 的子类，比如有如下的值："),e("br"),t._v("AlwaysScrollableScrollPhysics():可以让 ListView 里没有足够的内容也能滑动"),e("br"),t._v("ScrollPhysics():ListView 在没有足够的内容的时候不能滑动")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("shrinkWrap")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否根据列表项的总长度来设置 ListView 的长度，默认值为 false。"),e("br"),t._v("当 shrinkWrap 为 false 时，ListView 会在滚动方向扩展到可占用的最大空间"),e("br"),t._v("当 shrinkWrap 为 true 时，ListView 在滚动方向占用的空间就是其列表项的总长度，但是这样会很耗性能，因为当其列表项发生变化时，ListView 的大小会重新计算")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("padding")]),t._v(" "),e("td",[t._v("EdgeInsetsGeometry")]),t._v(" "),e("td",[t._v("ListView 的内边距")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("itemExtent")]),t._v(" "),e("td",[t._v("double")]),t._v(" "),e("td",[t._v("itemExtent 指的是列表项的大小"),e("br"),t._v("如果滚动方向是垂直方向，则 itemExtent 代表的是 子 Widget 的高度，"),e("br"),t._v("如果滚动方向为水平方向，则 itemExtent 代表的是 子 Widget 的长度"),e("br"),t._v("如果 itemExtent 不为 null，则会强制所有 子 Widget 在滑动方向的大小都为 itemExtent"),e("br"),t._v("指定 itemExtent 会比较高效，因为 子 Widget 的高度就不需要在去计算，ListView 也可以提前知道列表的长度")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("addAutomaticKeepAlives")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否用 AutomaticKeepAlive 来包列表项,默认为 true"),e("br"),t._v("在一个 lazy list 里，如果 子 Widget 为了保证自己在滑出可视界面时不被回收，就需要把 addAutomaticKeepAlives 设为 true"),e("br"),t._v("当 子 Widget 不需要让自己保持存活时，为了提升性能，请把 addAutomaticKeepAlives 设为 false"),e("br"),t._v("如果 子 Widget 自己维护其 KeepAlive 状态，那么此参数必须置为 false。")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("addRepaintBoundaries")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否用 RepaintBoundary 来包列表项，默认为 true"),e("br"),t._v("当 addRepaintBoundaries 为 true 时，可以避免列表项重绘，提高性能"),e("br"),t._v("但是当列表项重绘的开销非常小（如一个颜色块，或者一个较短的文本）时，不添加 RepaintBoundary 反而会更高效。")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("addSemanticIndexes")]),t._v(" "),e("td",[t._v("bool")]),t._v(" "),e("td",[t._v("是否用 IndexedSemantics 来包列表项,默认为 true"),e("br"),t._v("使用 IndexedSemantics 是为了正确的用于辅助模式")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("cacheExtent")]),t._v(" "),e("td",[t._v("double")]),t._v(" "),e("td",[t._v("ListView 可见部分的前面和后面的区域可以用来缓存列表项，"),e("br"),t._v("这部分区域的 item 即使不可见，也会加载出来，所以当滑动到这个区域的时候，缓存的区域就会变的可见，"),e("br"),t._v("cacheExtent 就表示缓存区域在可见部分的前面和后面有多少像素")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("children")]),t._v(" "),e("td",[t._v("List<Widget>")]),t._v(" "),e("td",[t._v("ListView 的列表项")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("semanticChildCount")]),t._v(" "),e("td",[t._v("int")]),t._v(" "),e("td",[t._v("提供语义信息的列表项的数量"),e("br"),t._v("默认为 ListView 的 item 的数量")]),t._v(" "),e("td",[t._v("可选")])]),t._v(" "),e("tr",[e("td",[t._v("dragStartBehavior")]),t._v(" "),e("td",[t._v("DragStartBehavior")]),t._v(" "),e("td",[t._v("确定处理拖动开始行为的方式。"),e("br"),t._v("如果设置为[DragStartBehavior.start]，则在检测到拖动手势时将开始滚动拖动行为"),e("br"),t._v("如果设置为[DragStartBehavior.down]，它将在首次检测到向下事件时开始")]),t._v(" "),e("td",[t._v("可选")])])])])])}),[],!1,null,null,null);e.default=l.exports}}]);