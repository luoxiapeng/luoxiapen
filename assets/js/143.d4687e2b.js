(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{430:function(_,v,t){"use strict";t.r(v);var e=t(1),a=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"数字对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数字对象"}},[_._v("#")]),_._v(" 数字对象")]),_._v(" "),v("p",[_._v("-"),v("code",[_._v("Number.MAX_VALUE")]),_._v(" 可表示的最大值")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("Number.MIN_VALUE")]),_._v("可表示的最小值")]),_._v(" "),v("li",[v("code",[_._v("Number.NaN")]),_._v(" 特指”非数字“")]),_._v(" "),v("li",[v("code",[_._v("Number.NEGATIVE_INFINITY")]),_._v(" 特指“负无穷”;在溢出时返回")]),_._v(" "),v("li",[v("code",[_._v("Number.POSITIVE_INFINITY")]),_._v(" 特指“正无穷”;在溢出时返回")]),_._v(" "),v("li",[v("code",[_._v("Number.EPSILON")]),_._v("表示 1 和比最接近 1 且大于 1 的最小 Number 之间的差别")]),_._v(" "),v("li",[v("code",[_._v("Number.MIN_SAFE_INTEGER")]),_._v(" JavaScript 最小安全整数.")]),_._v(" "),v("li",[v("code",[_._v("Number.MAX_SAFE_INTEGER")]),_._v(" JavaScript 最大安全整数.")])]),_._v(" "),v("h2",{attrs:{id:"数字的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数字的方法"}},[_._v("#")]),_._v(" 数字的方法")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("Number.parseFloat()")]),_._v(" 把字符串参数解析成浮点数，\n和全局方法 "),v("code",[_._v("parseFloat()")]),_._v("作用一致.")]),_._v(" "),v("li",[v("code",[_._v("Number.parseInt()")]),_._v(" 把字符串解析成特定基数对应的整型数字，和全局方法 parseInt() 作用一致. -"),v("code",[_._v("Number.isFinite()")]),_._v(" 判断传递的值是否为有限数字。")]),_._v(" "),v("li",[v("code",[_._v("Number.isInteger()")]),_._v(" 判断传递的值是否为整数。")]),_._v(" "),v("li",[v("code",[_._v("Number.isNaN()")]),_._v(" 判断传递的值是否为 NaN. More robust version of the original global isNaN().")]),_._v(" "),v("li",[v("code",[_._v("Number.isSafeInteger()")]),_._v(" 判断传递的值是否为安全整数。")])]),_._v(" "),v("h2",{attrs:{id:"数字类型原型上的一些方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数字类型原型上的一些方法"}},[_._v("#")]),_._v(" 数字类型原型上的一些方法")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("toExponential()")]),_._v(" 返回一个数字的指数形式的字符串，形如：1.23e+2 -"),v("code",[_._v("toFixed()")]),_._v(' 返回指定小数位数的表示形式，var a=123,b=a.toFixed(2)//b="123.00"')]),_._v(" "),v("li",[v("code",[_._v("toPrecision()")]),_._v(' 返回一个指定精度的数字。如下例子中，a=123 中，3 会由于精度限制消失 var a=123,b=a.toPrecision(2)//b="1.2e+2"')])]),_._v(" "),v("h2",{attrs:{id:"数学对象-math"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数学对象-math"}},[_._v("#")]),_._v(" 数学对象（Math）")]),_._v(" "),v("ul",[v("li",[_._v("Math.PI // π")])]),_._v(" "),v("p",[_._v("同理，标准数学函数也是 Math 的方法。 这些包括三角函数 ​​，对数，指数，和其他函数。比方说你想使用三角函数 sin， 你可以这么写：")]),_._v(" "),v("ul",[v("li",[_._v("Math.sin(1.56)")])]),_._v(" "),v("h2",{attrs:{id:"math-的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#math-的方法"}},[_._v("#")]),_._v(" Math 的方法")]),_._v(" "),v("blockquote",[v("p",[_._v("abs() 绝对值")])]),_._v(" "),v("blockquote",[v("p",[_._v("sin(), cos(), tan() 标准三角函数;参数为弧度")])]),_._v(" "),v("blockquote",[v("p",[_._v("asin(), acos(), atan(), atan2() 反三角函数; 返回值为弧度")])]),_._v(" "),v("blockquote",[v("p",[_._v("sinh(), cosh(), tanh() 双曲三角函数; 返回值为弧度.")])]),_._v(" "),v("blockquote",[v("p",[_._v("asinh(), acosh(), atanh() 反双曲三角函数;返回值为弧度.")])]),_._v(" "),v("blockquote",[v("p",[_._v("pow(), exp(), expm1(), log10(), log1p(), log2() 指数与对数函数")])]),_._v(" "),v("blockquote",[v("p",[_._v("floor(), ceil() 返回最大/最小整数小于/大于或等于参数")])]),_._v(" "),v("blockquote",[v("p",[_._v("min(), max() 返回一个以逗号间隔的数字参数列表中的较小或较大值(分别地)")])]),_._v(" "),v("blockquote",[v("p",[_._v("random() 返回 0 和 1 之间的随机数。")])]),_._v(" "),v("blockquote",[v("p",[_._v("round(), fround(), trunc(), 四舍五入和截断函数")])]),_._v(" "),v("blockquote",[v("p",[_._v("sqrt(), cbrt(), hypot() 平方根，立方根，平方参数的和的平方根\n两个参数平方和的平方根")])]),_._v(" "),v("blockquote",[v("p",[_._v("sign() 数字的符号, 说明数字是否为正、负、零。")])]),_._v(" "),v("blockquote",[v("p",[_._v("clz32(),imul()在 32 位 2 进制表示中，开头的 0 的数量.返回传入的两个参数相乘结果的类 C 的 32 位表现形式")])])])}),[],!1,null,null,null);v.default=a.exports}}]);